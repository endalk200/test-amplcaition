/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, NewEnt } from "@prisma/client";

export class NewEntServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.NewEntCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewEntCountArgs>
  ): Promise<number> {
    return this.prisma.newEnt.count(args);
  }

  async newEnts<T extends Prisma.NewEntFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewEntFindManyArgs>
  ): Promise<NewEnt[]> {
    return this.prisma.newEnt.findMany(args);
  }
  async newEnt<T extends Prisma.NewEntFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewEntFindUniqueArgs>
  ): Promise<NewEnt | null> {
    return this.prisma.newEnt.findUnique(args);
  }
  async createNewEnt<T extends Prisma.NewEntCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewEntCreateArgs>
  ): Promise<NewEnt> {
    return this.prisma.newEnt.create<T>(args);
  }
  async updateNewEnt<T extends Prisma.NewEntUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewEntUpdateArgs>
  ): Promise<NewEnt> {
    return this.prisma.newEnt.update<T>(args);
  }
  async deleteNewEnt<T extends Prisma.NewEntDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewEntDeleteArgs>
  ): Promise<NewEnt> {
    return this.prisma.newEnt.delete(args);
  }
}
